"""
FILE NAME:      Separate_Alpha_Beta.py

COMPLEMENTARY
SCRIPT(S)/
FILE(S):        submit_separate.sh

COMPATIBLE
PIPELINE(S):    Human, Mouse

DESCRIPTION:    This script will read the output files generated by MiGEC and separate the Alpha/Beta TCRs.

INPUT
FILES(S):       1) MiGEC result files

OUTPUT
FILES(S):       1) MiGEC result files, but separated based on Alpha-Beta TCR chains.

INPUT
ARGUMENT(S):    1) Input Directory: The directory that contains the MiGEC result files.

CREATED:        May2016

MODIFICATIONS
LOG:
Nov2017			Corrected name pattern of files.
06Aug19			Formatted code for compatibility for Python 3.7

LAST MODIFIED
BY:             Thomas Nguyen

PYTHON
VERSION USED
TO WRITE
SCRIPT:         2.7 --> 3.7

VERSION:        3.0

AUTHOR(S):      Annette Ko; Chen Chen; Jay Sharma; Thomas Nguyen

STATUS:         Working

TO DO LIST:     None at this moment.

NOTE(S):
"""
import sys, re, glob

dir = sys.argv[1]
files = sorted(glob.glob(dir+'*combined*.t*txt')) # Jay's edit to correct the name pattern after adding the filtering step.
genelist = ['TRAV','TRAJ','TRBV','TRBJ']

def getinfo(file):
	"""
	This function extracts the barcode, donor, and chain information of a filename.
	"""
	print (file)
	match = re.search("(.*)P7M1S-(.*)-(.*)-combined.(.*)txt",file)
	if match:
		barcode, donor, chain = match.group(2), match.group(3), 'chain'
	if not match:
		match = re.search("(.*)P7M1S-(.*)-(.*)-(.*)combined.txt",file)
		barcode, donor, chain = match.group(2), match.group(3), match.group(4)
	return barcode, donor, chain

def parse(line):
	"""
	This function extracts the V-Gene, J-Gene, and D-Gene of the MiGEC output file.
	"""
	split = line.split('\t')
	v, j, d = split[4], split[5], split[6]
	return v, j, d


def clean(file, newfilename, gene1, gene2, outfile):
	"""
	This function writes the output files based on whether the TCR belongs to the alpha or beta chain.
	"""
	newfile = open(newfilename, 'w')
	barcode, donor, chain = getinfo(newfilename)
	correct, other_chain, mixed, total = 0, 0, 0, 0
	for line in open(file, 'r'):
		if 'Count' in line:
			newfile.write(line)
		else:
			total += 1
			v, j, d = parse(line)
			if gene1 in v and gene2 in j:
				correct += 1
				if 'alpha' in newfilename:
					newfile.write(line)
				else: # if beta 
					newfile.write(line)
			else:  # if other chain or mixed
				other_genes = sorted([x for x in genelist if x != gene1 and x!=gene2])
				if other_genes[1] in v and other_genes[0] in j:
					other_chain += 1
				else:
					mixed += 1
	if total == 0:
		result = '%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%0.4f\t%0.4f\t%0.4f'%(barcode, donor, chain, total, correct, other_chain, mixed, correct+other_chain+mixed, 0, 0, 0)
	else:
		result = '%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%0.4f\t%0.4f\t%0.4f'%(barcode, donor, chain, total, correct, other_chain, mixed, correct+other_chain+mixed, float(correct)/total, float(other_chain)/total, float(mixed)/total)
	outfile.write(result+'\n')
	print (result)
	return correct, mixed, total


outfile = open('separate-ab-results.txt', 'w')
header = '%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s'%('barcode', 'donor', 'chain', 'total', 'correct', 'other_chain', 'mixed', 'correct+mixed','%correct','%other_chain','%mixed')
print (header)
outfile.write(header+'\n')
for file in files:
	barcode, donor, chain = getinfo(file)
	print (file, barcode, donor, chain)
	if chain=='chain':
		newfilename_a = 'P7M1S-'+barcode+'-'+donor+'-alphacombined.txt'
		newfilename_b = 'P7M1S-'+barcode+'-'+donor+'-betacombined.txt'
		correct, mixed, total = clean(file, newfilename_a, 'TRAV', 'TRAJ', outfile)	#Write the Alpha output file
		correct, mixed, total = clean(file, newfilename_b, 'TRBV', 'TRBJ', outfile) #Write the Beta output file
	else:
		newfilename = 'P7M1S-'+barcode+'-'+donor+'-'+chain+'combined.txt'
		if chain=='alpha':
			correct, mixed, total = clean(file, newfilename, 'TRAV', 'TRAJ', outfile)
		else:
			correct, mixed, total = clean(file, newfilename, 'TRBV', 'TRBJ', outfile)