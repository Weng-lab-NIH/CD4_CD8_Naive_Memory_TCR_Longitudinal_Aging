"""
FILE NAME:      Merge_Assembled_Blasted_2_for_Thomas.py

COMPLEMENTARY
SCRIPT(S)/
FILE(S):        submit_merge_assembled_blasted_2.sh

COMPATIBLE
PIPELINE(S):    Human, Mouse

DESCRIPTION:    This script will locate and list the UMIs and consensus sequences for each TCR generated by MiGEC.

INPUT
FILES(S):       1) Assembled Consensus FASTQ file
                2) MiGEC BLAST Results-Mapped sequences

OUTPUT
FILES(S):       1) A merged file (contains V Gene, CDR3 AA, J Gene, D Gene, UMI, Consensus Sequence, and number of reads).

INPUT
ARGUMENT(S):    1) Directory Name: List the directory name that corresponds to the Batch File you're running

CREATED:        May2016

MODIFICATIONS
LOG:
05Feb18         Changed the parseass function to search VJD, UMI, TCR Sequence to be compatible with MiGEC 1.2.7.
05Feb18         Changed assembly & BLAST directories from mouse (From where the original script was copied) to human.
06Jun18         Temporarily changed regular expression search (Line 29) to match mapped file.
06Aug19         Formatted script to be compatible with Python 3.7.

LAST MODIFIED
BY:             Thomas Nguyen

PYTHON
VERSION USED
TO WRITE
SCRIPT:         2.7.14 --> 3.7

VERSION:        3.0

AUTHOR(S):      Annette Ko; Chen Chen; Jay Sharma; Thomas Nguyen

STATUS:         Working

TO DO LIST:     Cleanup script for faster runtimes.

DISCLAIMER(S):  None

NOTE(S):        Currently formatted for Biowulf (NIH) implementation.
"""
import sys, os, re, glob, time
from collections import defaultdict
from Bio import SeqIO

types = sys.argv[1].split(',')

dir_ass = '/data/TCR/hiseq_data/redofiller6/human/done/QS1/assembly-mapped-QS1/%s/' % (types[0])
dir_blast = '/data/TCR/hiseq_data/redofiller6/human/done/QS1/blast-QS1/%s/' % (types[0])
outdirectory = dir_blast

def getinfo(file):
    """
    This function obtains the barcode, donor, and chain of the file.
    """
    match1 = re.search("(.*)P7M1S-(.*)-(.*)-combined_regrouped.t(.*).fastq", file)
    match2 = re.search("P7M1S-(.*)-(.*)-(.*)combined.txt", file)
    if match1:
        barcode, donor, chain = match1.group(2),match1.group(3), 'chain'
    elif match2:
        barcode, donor, chain = match2.group(1), match2.group(2), match2.group(3)
    else:
        print(file)
        print ("Error! Regular expression search couldn't find any input files. Check the " +
               os.path.basename(__file__) + " script to make sure regular expressions match the file name.")
        sys.exit(1)
    return barcode, donor, chain

def parsebl(line):
    """
    This function will parse through the results file of the Alpha-Beta separated MiGEC file.
    """
    line = line.rstrip()
    split = line.split('\t')
    cdr3NT, cdr3AA, V, J, D, umi_good, umi_tot, reads_good, reads_tot = split[2],split[3],split[4],split[5],split[6],int(split[-4]),int(split[-3]),int(split[-2]),int(split[-1])
    return cdr3NT, cdr3AA, V, J, D, umi_good, umi_tot, reads_good, reads_tot

def parseass(record):
    """
    This function will obtain the UMI, reads, CDR3 NT, V, J, D, and consensus sequence from the MiGEC
    results file-mapped results.
    """
    match_umi_reads = re.search(r"UMI:(\w{16,30}):(\d{1,})", record.description)
    match_cdr3 = re.search(r"CDR3:(\w{1,})", record.description)
    vjd = re.search(r"V:(\S{1,}) J:(\S{1,}) D:(\S{1,})", record.description)
    V = vjd.group(1)
    J = vjd.group(2)
    D = vjd.group(3)
    umi,reads = match_umi_reads.group(1),match_umi_reads.group(2)
    cdr3NT = match_cdr3.group(1)
    seq = str(record.seq)
    return umi, reads, cdr3NT, V, J, D, seq

def makedictass(file):
    """
    This function compiles the UMI, reads, and consensus sequence for each TCR from the MiGEC
    results file-Mapped results.
    """
    dict = defaultdict(list)
    for record in SeqIO.parse(file, 'fastq'):
        umi, reads, cdr3NT, V, J, D, seq = parseass(record)
        key = '%s\t%s\t%s\t%s'%(cdr3NT, V, J, D)
        val = '%s\t%s\t%s'%(umi, reads, seq)
        dict[key] += [val]
    return dict

def makedictbl(file):
    """
    This function appends the CDR3AA, UMI, and Reads information from the
    Alpha-Beta separated MiGEC results file.
    """
    dict = defaultdict(str)
    for line in open(file):
        if not 'events' in line:
            cdr3NT, cdr3AA, V, J, D, umi_good, umi_tot, reads_good, reads_tot = parsebl(line)
            key = '%s\t%s\t%s\t%s'%(cdr3NT, V, J, D)
            val = '%s\t%s\t%s\t%s\t%s'%(cdr3AA, umi_good, umi_tot, reads_good, reads_tot)
            dict[key] = val
    return dict

def tabdelim(val):
    """
    This splits the value based on tab-delinated values.
    """
    return val.split('\t')

start = time.time()

for type in types:
    assfiles = sorted(glob.glob(dir_ass + '*combined*.t*.fastq'))
    blfiles = sorted(glob.glob(dir_blast + 'P*combined.txt'))

    if not assfiles:
        print ("Error! FASTQ input files in " + dir_ass + " not found. Check the " +
               os.path.basename(__file__) + " script to make sure input file name searches match.")
        sys.exit(1)
    if not blfiles:
        print ("Error! Alpha and beta text files in " + \
              dir_blast + " not found. Check the " + os.path.basename(__file__) +
              " script to make sure input file name searches match, or that Separate Alpha and Beta was run.")
        sys.exit(1)

    for ass in assfiles:
        for bl in blfiles:
            barcode, donor, chain = getinfo(ass)
            barcode1, donor1, chain1 = getinfo(bl)
            moveon = False
            if chain==chain1 and barcode==barcode1 and donor==donor1:
                moveon = True
            elif chain=='chain':
                if barcode==barcode1 and donor==donor1:
                    moveon = True

            if moveon==True:
                print (ass, bl)
                outfilename = outdirectory + 'merged-'+'P7M1S-'+barcode+'-'+donor+'-'+chain1+'combined.txt'
                outfile = open(outfilename, 'w')

                info = 'For barcode: %s \t chain: %s ...'%(barcode, chain1)
                print (info)
                dict_ass = makedictass(ass)
                dict_bl = makedictbl(bl)
                summary = 'TCRs by CDR3 NT in assembly: %s \t in blast: %s'%(len(dict_ass), len(dict_bl))
                print (summary)
                lines = 0
                for key, seqlist in dict_ass.iteritems():
                    if key in dict_bl:
                        split_bl = tabdelim(dict_bl[key])
                        cdr3AA = split_bl[0]
                        for val2 in seqlist:
                            split_ass = tabdelim(val2)
                            umi, rds, seq = split_ass[0], split_ass[1], split_ass[-1]
                            newline = '%s\t%s\t%s\t%s\t%s'%(key, cdr3AA, umi, seq, rds)
                            outfile.write(newline+'\n')
                            lines += 1
                summary2 = '%s contains %s TCRs and %s lines'%(outfilename, len(dict_bl), lines)
                print (summary2)

print ('TOTAL TIME TAKEN: %0.2f sec ==='%(time.time()-start))